{"version":3,"sources":["proxy.ts","TextInput.tsx","Login.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","TextInputAndButton","textInput","React","createRef","onClick","current","ref","buttonContent","Login","email","password","displayName","register","sendPacket","staySignedIn","src","width","alt","key","href","preventDefault","ConversationCard","m","forceUpdate","removeAllEventListener","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","LeftPane","firstMessage","c","user","tag","text","sendContactRequest","map","selectedConversation","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9389871b.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket, MessageDto } from \"./chat\";\r\n\r\nexport class EventProducer<M> {\r\n  private listeners: { type: keyof M; listener; obj?: Object }[] = [];\r\n  addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n    this.listeners.push({ type, listener, obj });\r\n  }\r\n  removeEventListener<K extends keyof M>(type: string, listener: M[K]) {\r\n    this.listeners.splice(\r\n      this.listeners.findIndex(\r\n        (x) => x.type === type && x.listener === listener\r\n      ),\r\n      1\r\n    );\r\n  }\r\n  protected dispatch(type: string, ...args) {\r\n    for (let listener of this.listeners.filter((x) => x.type === type))\r\n      listener.listener.call(listener.obj, ...args);\r\n  }\r\n  removeAllEventListener(obj: Object) {\r\n    if (!obj) throw new Error(\"Must specify object\");\r\n    this.listeners = this.listeners.filter((x) => x.obj !== obj);\r\n  }\r\n}\r\n\r\ninterface ProxyEventMap {\r\n  login: () => void;\r\n  message: (channelId: string, message: MessageDto) => void;\r\n  conversation: (channelId: string) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap> {\r\n  private ws: WebSocket;\r\n  inbox: InboxDto | null = null;\r\n  constructor() {\r\n    super();\r\n    this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n    this.ws.addEventListener(\"open\", () => {});\r\n    this.ws.addEventListener(\"message\", (e) => {\r\n      let p = JSON.parse(e.data) as IncomingPacket;\r\n      switch (p.type) {\r\n        case \"error\":\r\n          alert(p.message);\r\n          break;\r\n        case \"login\":\r\n          this.inbox = p.inbox;\r\n          this.dispatch(\"login\");\r\n          break;\r\n        case \"message\":\r\n          let cid = p.channelId;\r\n          this.inbox!.conversations.find(\r\n            (x) => x.channelId === cid\r\n          )?.lastMessages.push(p.message);\r\n          this.dispatch(\"message\", cid, p.message);\r\n          break;\r\n        case \"conversationAdded\":\r\n          this.inbox!.conversations.push(p.conversation);\r\n          this.dispatch(\"conversation\", p.conversation.channelId);\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  sendPacket(packet: OutgoingPacket) {\r\n    this.ws.send(JSON.stringify(packet));\r\n  }\r\n}\r\nexport var proxy = new Proxy();\r\n","import React, { Component } from \"react\";\r\nimport \"./TextInput.css\";\r\n\r\nexport interface TextInputOptions {\r\n  value?: string;\r\n  onChange?: (value: string) => void;\r\n  type?: \"text\" | \"password\" | \"email\";\r\n  placeholder?: string;\r\n  onEnter?: () => void;\r\n  autofocus?: boolean;\r\n}\r\n\r\nexport class TextInput extends Component<TextInputOptions> {\r\n  state = { value: this.props.value, focus: false };\r\n  render() {\r\n    let attrs = {} as any;\r\n    if (this.props.autofocus) attrs.autoFocus = true;\r\n    if (this.props.onEnter)\r\n      attrs.onKeyDown = (e) => {\r\n        if (e.keyCode === 13) this.props.onEnter!();\r\n      };\r\n    return (\r\n      <div className=\"text-input\">\r\n        <input\r\n          type={this.props.type ?? \"text\"}\r\n          value={this.state.value}\r\n          onChange={(e) => {\r\n            this.setState({ value: e.target.value });\r\n            this.props.onChange?.(e.target.value);\r\n          }}\r\n          onBlur={() => this.setState({ focus: false })}\r\n          onFocus={() => this.setState({ focus: true })}\r\n          {...attrs}\r\n        />\r\n        <div className=\"focus-indicator\"></div>\r\n        <label\r\n          className={this.state.value || this.state.focus ? \"subsided\" : \"\"}\r\n        >\r\n          {this.props.placeholder}\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n  buttonContent?: string;\r\n  onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions> {\r\n  onClick() {\r\n    if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n      this.textInput.current?.setState({ value: \"\" });\r\n  }\r\n  textInput = React.createRef<TextInput>();\r\n  render() {\r\n    return (\r\n      <div className=\"text-input-and-button\">\r\n        <TextInput\r\n          {...this.props}\r\n          ref={this.textInput}\r\n          onEnter={() => this.onClick()}\r\n        />\r\n        <button type=\"button\" onClick={() => this.onClick()}>\r\n          {this.props.buttonContent}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { proxy } from \"./proxy\";\r\nimport { TextInput } from \"./TextInput\";\r\n\r\nexport class Login extends Component {\r\n  state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n  onClick() {\r\n    if (this.state.register)\r\n      proxy.sendPacket({\r\n        type: \"register\",\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        displayName: this.state.displayName,\r\n        staySignedIn: false,\r\n      });\r\n    else\r\n      proxy.sendPacket({\r\n        type: \"login\",\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        staySignedIn: false,\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"login\">\r\n        <img src=\"logo512.png\" width=\"256\" alt=\"logo\" />\r\n        {this.state.register && (\r\n          <TextInput\r\n            type=\"text\"\r\n            placeholder=\"Display Name (Agent Smith)\"\r\n            value={this.state.displayName}\r\n            onChange={(e) => this.setState({ displayName: e })}\r\n            key={this.state.displayName}\r\n            autofocus={true}\r\n            onEnter={() => this.onClick()}\r\n          />\r\n        )}\r\n        <TextInput\r\n          type=\"email\"\r\n          placeholder=\"Email (someone@example.com)\"\r\n          value={this.state.email}\r\n          onChange={(e) => {\r\n            this.setState({ email: e });\r\n            if (e === \"TR2JRS\") this.setState({ displayName: \"Feri\" });\r\n          }}\r\n          onEnter={() => this.onClick()}\r\n        />\r\n        <TextInput\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={this.state.password}\r\n          onChange={(e) => this.setState({ password: e })}\r\n          onEnter={() => this.onClick()}\r\n        />\r\n        <button type=\"button\" onClick={() => this.onClick()}>\r\n          {this.state.register ? \"Register\" : \"Login\"}\r\n        </button>\r\n        <p>\r\n          {this.state.register\r\n            ? \"Switch back to \"\r\n            : \"Have no account yet? Go and \"}\r\n          <a\r\n            href=\"register-login\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              this.setState((state: { register: boolean }) => ({\r\n                register: !state.register,\r\n              })); // pass a function instead of object\r\n            }}\r\n          >\r\n            {this.state.register ? \"Login\" : \"Register\"}\r\n          </a>\r\n        </p>\r\n        <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./proxy\";\r\n\r\nexport class ConversationCard extends Component<{\r\n  conversation: ConversationDto;\r\n  selected: boolean;\r\n  onSelect: () => void;\r\n}> {\r\n  componentDidMount() {\r\n    proxy.addEventListener(\r\n      \"message\",\r\n      (cid, m) => {\r\n        if (cid === this.props.conversation.channelId) this.forceUpdate();\r\n      },\r\n      this\r\n    );\r\n  }\r\n  componentWillUnmount() {\r\n    proxy.removeAllEventListener(this);\r\n  }\r\n  render() {\r\n    let lastMessage =\r\n      this.props.conversation.lastMessages.length > 0\r\n        ? this.props.conversation.lastMessages[\r\n            this.props.conversation.lastMessages.length - 1\r\n          ]\r\n        : null;\r\n    return (\r\n      <div\r\n        className={\r\n          \"conversation-card\" + (this.props.selected ? \" selected\" : \"\")\r\n        }\r\n        onClick={() => this.props.onSelect()}\r\n      >\r\n        <div className=\"row\">\r\n          <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n          <span className=\"time\">\r\n            {lastMessage &&\r\n              new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n          </span>\r\n        </div>\r\n        <span className=\"last-message\">{lastMessage?.content}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { InboxDto, ConversationDto } from \"./chat\";\r\nimport { TextInputAndButton } from \"./TextInput\";\r\nimport { proxy } from \"./proxy\";\r\nimport { ConversationCard } from \"./ConversationCard\";\r\n\r\nexport class LeftPane extends Component<{\r\n  inbox: InboxDto;\r\n  selectedConversation: ConversationDto | undefined;\r\n  onSelect: (c: ConversationDto) => void;\r\n}> {\r\n  sendContactRequest(email: string) {\r\n    proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n    return true;\r\n  }\r\n  componentDidMount() {\r\n    proxy.addEventListener(\"conversation\", (c) => this.forceUpdate(), this);\r\n  }\r\n  componentWillUnmount() {\r\n    proxy.removeAllEventListener(this);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"left-pane\">\r\n        <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n        <TextInputAndButton\r\n          type=\"text\"\r\n          placeholder=\"Add user by Tag (Name#123)\"\r\n          buttonContent=\"Inv\"\r\n          onClick={(text) => this.sendContactRequest(text)}\r\n        />\r\n        <div className=\"conversations\">\r\n          {this.props.inbox.conversations.map((x) => (\r\n            <ConversationCard\r\n              key={x.channelId}\r\n              conversation={x}\r\n              selected={x === this.props.selectedConversation}\r\n              onSelect={() => this.props.onSelect(x)}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat\";\r\n\r\nexport class MessageCard extends PureComponent<{\r\n  message: MessageDto;\r\n  own: boolean;\r\n}> {\r\n  render() {\r\n    return (\r\n      <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n        <div className=\"bubble\">\r\n          <span className=\"text\">{this.props.message.content}</span>\r\n          <span className=\"time\">\r\n            {new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { proxy } from \"./proxy\";\r\nimport { TextInputAndButton } from \"./TextInput\";\r\nimport { MessageCard } from \"./MessageCard\";\r\nimport { ConversationDto } from \"./chat\";\r\n\r\nexport class RightPane extends Component<{\r\n  conversation?: ConversationDto;\r\n  onBack: () => void;\r\n}> {\r\n  componentDidMount() {\r\n    proxy.addEventListener(\r\n      \"message\",\r\n      (cid, m) => {\r\n        if (cid === this.props.conversation?.channelId) this.forceUpdate();\r\n      },\r\n      this\r\n    );\r\n  }\r\n  componentWillUnmount() {\r\n    proxy.removeAllEventListener(this);\r\n  }\r\n  onSend(text: string) {\r\n    proxy.sendPacket({\r\n      type: \"message\",\r\n      channelId: this.props.conversation!.channelId,\r\n      referenceTo: 0,\r\n      contentType: 0,\r\n      content: \"T: text \" + text,\r\n    });\r\n    return true;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"right-pane column\">\r\n        {this.props.conversation && (\r\n          <>\r\n            <div className=\"conversation-header row\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"only-narrow\"\r\n                onClick={() => this.props.onBack()}\r\n              >\r\n                Back\r\n              </button>\r\n              <p>{this.props.conversation?.name}</p>\r\n            </div>\r\n            <div className=\"messages\">\r\n              {this.props.conversation?.lastMessages.map((x) => (\r\n                <MessageCard\r\n                  key={x.id}\r\n                  message={x}\r\n                  own={x.senderId === proxy.inbox?.user.id}\r\n                />\r\n              ))}\r\n            </div>\r\n            <div className=\"send-message row\">\r\n              <TextInputAndButton\r\n                type=\"text\"\r\n                placeholder=\"Type something awesome here...\"\r\n                buttonContent=\"Send\"\r\n                onClick={(x) => this.onSend(x)}\r\n              />\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { proxy } from \"./proxy\";\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { RightPane } from \"./RightPane\";\r\n\r\nexport class Main extends Component {\r\n  state = { selectedConversation: undefined as ConversationDto | undefined };\r\n  render() {\r\n    let className =\r\n      \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n    return (\r\n      <div className={className}>\r\n        <LeftPane\r\n          inbox={proxy.inbox!}\r\n          selectedConversation={this.state.selectedConversation}\r\n          onSelect={(c) => this.setState({ selectedConversation: c })}\r\n        />\r\n        <RightPane\r\n          conversation={this.state.selectedConversation}\r\n          onBack={() => this.setState({ selectedConversation: undefined })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { Login } from \"./Login\";\nimport { proxy } from \"./proxy\";\nimport { Main } from \"./Main\";\n\nexport default class App extends Component {\n  state = { showLogin: true };\n  componentDidMount() {\n    proxy.addEventListener(\"login\", () => this.setState({ showLogin: false }));\n  }\n  render() {\n    return (\n      <div className=\"app\">{this.state.showLogin ? <Login /> : <Main />}</div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}